{% extends "backbase.html.twig" %}

{% block title %}
    Hebergement index
{% endblock %}

{% block body %}
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <div class="midde_cont">
        <div class="container-fluid">
            <div class="row column_title">
                <div class="col-md-12">
                    <div class="page_title">
                        <h2>Hebergement Index</h2>
                    </div>
                </div>
            </div>
            <div class="d-flex">
                <button id="btPrint" onclick="createPDF()" class="btn btn-success export-pdf-btn">
                    <i class="fas fa-file-pdf"></i> Export PDF
                </button>
                <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search ..." class="form-control" id="search-input">
                <button onclick="sortTableByStars()" class="btn btn-info ml-2">Sort by Stars</button>
            </div>
            
            <!-- Tableau des hébergements -->
            <table class="table table-bordered" id="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Accommodation</th>
                        <th>Image</th>
                        <th>Stars rating</th>
                        <th>Capacity</th>
                        <th>Tariff per night</th>
						<th>QR Code</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for hebergement in hebergement %}
                        <tr>
                            <td>{{ hebergement.id }}</td>
                            <td>{{ hebergement.nomH }}</td>
                            <td><img src="{{ hebergement.adresse }}" width="100" height="100"></td>
                            <td>{{ hebergement.nbrEtoile }}</td>
                            <td>{{ hebergement.capacite }}</td>
                            <td>{{ hebergement.tarifParNuit }}</td>
							<td>
								<img src="{{ hebergement.qrCode }}" width="123" height="100" />
							</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Actions">
                                    <a href="{{ path('app_hebergement_show', {'id': hebergement.id}) }}" class="btn btn-primary">
                                        <i class="fas fa-eye"></i> Show
                                    </a>
                                    <a href="{{ path('app_hebergement_edit', {'id': hebergement.id}) }}" class="btn btn-warning">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                    <form method="post" action="{{ path('app_hebergement_delete', {'id': hebergement.id}) }}" onsubmit="return confirm('Are you sure you want to delete this accommodation?');">
                                        <input type="hidden" name="_method" value="DELETE">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ hebergement.id) }}">
                                        <button type="submit" class="btn btn-danger">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="8">No records found</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>

            <!-- Lien pour créer un nouvel hébergement -->
            <a href="{{ path('app_hebergement_new') }}" class="btn btn-success">
                <i class="fas fa-plus"></i> Create New Accommodation
            </a>
            
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script>
        function createPDF() {
            // Get the table element
            var originalTable = document.getElementById('table');

            // Clone the table element
            var tableClone = originalTable.cloneNode(true);

            // Remove the header cell for the action column
            var headerRow = tableClone.getElementsByTagName('tr')[0];
            headerRow.deleteCell(headerRow.cells.length - 1); // Remove the last header cell

            // Remove the last column (action column) from each row in the cloned table
            var rows = tableClone.getElementsByTagName('tr');
            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].getElementsByTagName('td');
                if (cells.length > 0) {
                    rows[i].deleteCell(cells.length - 1); // Remove the last cell (action column)
                }
            }

            // Get the HTML content of the modified table
            var sTable = tableClone.outerHTML;

            // Define the CSS styles for the table
            var style = `
                <style>
                    table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; font-weight: bold; }
                    td:first-child { font-weight: bold; }
                </style>
            `;

            // Open a new window
            var win = window.open('', '', 'height=700,width=700');
            
            // Write the HTML content to the new window
            win.document.write('<title>Hebergement List</title>');   // PDF title
            win.document.write(style);          // Add CSS styles
            // Start body tag
            win.document.write(sTable);         // Add table content
            // End body tag
            win.document.close(); 	// Close the current window
            win.print();    // Print the contents
        }

        function myFunction() {
            // Declare variables
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("table");
            tr = table.getElementsByTagName("tr");

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[1];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }

        function sortTableByStars() {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("table");
            switching = true;
            dir = "asc";

            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("TD")[3];
                    y = rows[i + 1].getElementsByTagName("TD")[3];

                    if (dir == "asc") {
                        if (parseInt(x.innerHTML) > parseInt(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (parseInt(x.innerHTML) < parseInt(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>
{% endblock %}
